import { useEffect, useState } from 'react';
import './App.css';
import { db } from './firebase';
import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  onSnapshot,
} from 'firebase/firestore';

function App() {
  const [users, setUsers] = useState([]); // Store users from users collection
  const [userEmail, setUserEmail] = useState(''); // Email of user to update
  const [plan, setPlan] = useState('Lifetime Plan'); // Selected subscription plan
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true); // Loading state

  useEffect(() => {
    const unsubscribeUsers = onSnapshot(collection(db, 'users'), (snapshot) => {
      console.log('Users snapshot:', snapshot.docs);
      const usersData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setUsers(usersData);
      setLoading(false); // Stop loading once data is fetched
    }, (error) => {
      console.error('Error fetching users:', error);
      setError('Failed to fetch users: ' + error.message);
      setLoading(false);
    });

    return () => unsubscribeUsers();
  }, []);

  const updateSubscription = async () => {
    
    if (!userEmail || !plan) {
      setError('Please enter user email and select a plan.');
      return;
    }

    setLoading(true);
    try {
      console.log('Updating subscription for:', userEmail, plan);
      const q = query(collection(db, 'users'), where('email', '==', userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        setError('No user found with that email.');
        setLoading(false);
        return;
      }

      const userDoc = querySnapshot.docs[0];
      const userId = userDoc.id; // Autogenerated ID
      const today = new Date();
      let endDate = '-';

      if (plan === 'Monthly Plan') {
        today.setMonth(today.getMonth() + 1);
        endDate = today.toISOString().split('T')[0];
      } else if (plan === 'Yearly Plan') {
        today.setFullYear(today.getFullYear() + 1);
        endDate = today.toISOString().split('T')[0];
      }

      const subscriptionData = {
        plan,
        amount: plan === 'Monthly Plan' ? 699 : plan === 'Yearly Plan' ? 5999 : 24999,
        startDate: today.toISOString().split('T')[0],
        endDate,
        createdAt: today.toISOString(),
      };

      await addDoc(collection(db, 'users', userId, 'subscriptions'), subscriptionData);
      setError('Subscription updated successfully!');
      setUserEmail('');
      setLoading(false);
    } catch (err) {
      console.error('Subscription update error:', err);
      setError('Failed to update subscription: ' + err.message);
      setLoading(false);
    }
  };

  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  return (
    <div className="admin-panel">
      <h1 className="panel-heading">Smart Distributor Admin Panel</h1>
      <div className="subscription-form">
        <input
          type="email"
          placeholder="Enter user email"
          value={userEmail}
          onChange={(e) => setUserEmail(e.target.value)}
        />
        <select value={plan} onChange={(e) => setPlan(e.target.value)}>
          <option value="Lifetime Plan">Lifetime Plan (₹24,999)</option>
          <option value="Monthly Plan">Monthly Plan (₹699)</option>
          <option value="Yearly Plan">Yearly Plan (₹5,999)</option>
        </select>
        <button onClick={updateSubscription}>
          Update Subscription
        </button>
        {error && <p className="error">{error}</p>}
      </div>
      <div className="table-wrapper">
        <div className="card-header">
          <div className="card-part first-part"><strong>Name</strong></div>
          <div className="card-part second-part"><strong>Email</strong></div>
          <div className="card-part third-part"><strong>Plan</strong></div>
        </div>
        <div className="users-list">
          {users.length > 0 ? (
            users.map((user, idx) => (
              <div key={user.id || idx} className="user-card">
                <div className="card-part first-part"><h3>{user.fullName || 'N/A'}</h3></div>
                <div className="card-part second-part"><p>{user.email || 'N/A'}</p></div>
                <div className="card-part third-part">
                  {user.subscriptions && user.subscriptions.length > 0
                    ? user.subscriptions[0].plan
                    : 'No Plan'}
                </div>
              </div>
            ))
          ) : (
            <p>No users found.</p>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;